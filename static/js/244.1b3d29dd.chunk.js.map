{"version":3,"file":"static/js/244.1b3d29dd.chunk.js","mappings":"wKAgCA,IA9Ba,SAAC,GAAyB,IAAvBA,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OACnBC,EAAO,KACLC,GAAWC,EAAAA,EAAAA,MACjB,OAAQH,GACN,IAAK,OAOL,QACEC,EAAO,gBALT,IAAK,SACHA,EAAO,GAOX,OACE,wBACGF,EAAQK,KAAI,SAAAC,GACX,OACE,yBACE,SAAC,KAAD,CAAMC,GAAIL,EAAOI,EAAIE,GAAIC,MAAO,CAAEC,KAAMP,GAAxC,SACGG,EAAIK,MAAQL,EAAIK,MAAQL,EAAIM,QAFxBN,EAAIE,GAMhB,KAGN,C,iHC5BYK,E,QAAcC,EAAAA,KAAH,mE,SC0BxB,EAzBmB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OACpB,GADwC,EAAZC,OACQC,EAAAA,EAAAA,UAAS,KAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAWA,OACE,UAACN,EAAD,CAAaO,SAVf,SAAsBC,GACpBA,EAAEC,iBACFP,EAAOG,EACR,EAOC,WACE,kBACEK,KAAK,OACLX,KAAK,QACLI,MAAOE,EACPM,SAVN,SAA2BH,GACzBF,EAAcE,EAAEI,OAAOT,MACxB,KAUG,mBAAQO,KAAK,SAAb,SAAsB,aAG3B,E,8BCsBD,EAzCe,WAAO,IAAD,EACnB,GAA8BN,EAAAA,EAAAA,UAAS,IAAvC,eAAOjB,EAAP,KAAgB0B,EAAhB,KACA,GAAsCC,EAAAA,EAAAA,MAAtC,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAkCZ,EAAAA,EAAAA,WAAS,GAA3C,eAAOa,EAAP,KAAkBC,EAAlB,KACA,GAA0Bd,EAAAA,EAAAA,WAAS,GAAnC,eAAOe,EAAP,KAAcC,EAAd,KAEIC,EAAS,UAAGN,EAAYO,IAAI,gBAAnB,QAA+B,GAwB5C,OAZAC,EAAAA,EAAAA,YAAU,WACU,KAAdF,IAGJG,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,YAAkB,IAAftC,EAAc,EAAdA,QACP0B,EAAW1B,EACZ,IACAuC,OAAM,SAAAP,GAAK,OAAIC,GAAS,EAAb,IACXO,SAAQ,kBAAMT,GAAa,EAAnB,GACZ,GAAE,CAACG,KAGF,iCACE,wBAAI,YACJ,SAAC,EAAD,CAAYnB,OAzBhB,SAA0B0B,GACxBZ,EAAe,CAAEa,MAAOD,KACxBJ,EAAAA,EAAAA,IAAgBI,GACbH,MAAK,YAAkB,IAAftC,EAAc,EAAdA,QACP0B,EAAW1B,EACZ,IACAuC,OAAM,SAAAP,GAAK,OAAIC,GAAS,EAAb,IACXO,SAAQ,kBAAMT,GAAa,EAAnB,GACZ,IAkBID,GAAaI,IAAa,SAAC,IAAD,IAC1BlC,EAAQ2C,OAAS,IAAK,SAACC,EAAA,EAAD,CAAM5C,QAASA,EAASC,OAAO,WACrD+B,IAAS,uBAAG,8BAGlB,C","sources":["components/List/List.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\n\nconst List = ({ results, parent }) => {\n  let path = null;\n  const location = useLocation();\n  switch (parent) {\n    case 'home':\n      path = 'movies/';\n      break;\n    case 'movies':\n      path = '';\n\n      break;\n    default:\n      path = 'movies/';\n  }\n\n  return (\n    <ul>\n      {results.map(res => {\n        return (\n          <li key={res.id}>\n            <Link to={path + res.id} state={{ from: location }}>\n              {res.title ? res.title : res.name}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default List;\n","import styled from '@emotion/styled';\n\nexport const StylishForm = styled.form`\n  & button {\n    margin-left: 20px;\n  }\n`;\n","import { useState } from 'react';\nimport { StylishForm } from './SearchForm.styled';\n\nconst SearchForm = ({ submit, value }) => {\n  const [queryValue, setQueryValue] = useState('');\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    submit(queryValue);\n  }\n\n  function handleInputChange(e) {\n    setQueryValue(e.target.value);\n  }\n\n  return (\n    <StylishForm onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        value={queryValue}\n        onChange={handleInputChange}\n      />\n      <button type=\"submit\">Search</button>\n    </StylishForm>\n  );\n};\n\nexport default SearchForm;\n","import List from 'components/List/List';\nimport SearchForm from 'components/SearchForm/SearchForm';\nimport { getMovieByTitle } from 'helper/api';\nimport { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport Loader from 'components/Loader/Loadet';\n\nconst Movies = () => {\n  const [results, setResults] = useState([]);\n  const [searchParam, setSearchParam] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  let filmQuery = searchParam.get('query') ?? '';\n\n  function handleSearchForm(q) {\n    setSearchParam({ query: q });\n    getMovieByTitle(q)\n      .then(({ results }) => {\n        setResults(results);\n      })\n      .catch(error => setError(true))\n      .finally(() => setIsLoading(false));\n  }\n\n  useEffect(() => {\n    if (filmQuery === '') {\n      return;\n    }\n    getMovieByTitle(filmQuery)\n      .then(({ results }) => {\n        setResults(results);\n      })\n      .catch(error => setError(true))\n      .finally(() => setIsLoading(false));\n  }, [filmQuery]);\n\n  return (\n    <>\n      <h1>Movies</h1>\n      <SearchForm submit={handleSearchForm} />\n      {isLoading && filmQuery && <Loader />}\n      {results.length > 0 && <List results={results} parent=\"movies\" />}\n      {error && <p>Something went wrong...</p>}\n    </>\n  );\n};\n\nexport default Movies;\n"],"names":["results","parent","path","location","useLocation","map","res","to","id","state","from","title","name","StylishForm","styled","submit","value","useState","queryValue","setQueryValue","onSubmit","e","preventDefault","type","onChange","target","setResults","useSearchParams","searchParam","setSearchParam","isLoading","setIsLoading","error","setError","filmQuery","get","useEffect","getMovieByTitle","then","catch","finally","q","query","length","List"],"sourceRoot":""}