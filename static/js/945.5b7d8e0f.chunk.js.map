{"version":3,"file":"static/js/945.5b7d8e0f.chunk.js","mappings":"8QAEMA,EAAKC,EAAAA,EAAAA,GAAH,iGAmBR,EAXe,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,YAAeC,IAAXD,GAA0C,IAAlBA,EAAOE,QAAqB,uBAAG,aAEzD,SAACJ,EAAD,UACGE,EAAOG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACV,wBAAcA,GAALD,EADC,KAKjB,E,UChBYE,GAAaP,EAAAA,EAAAA,GAAOQ,EAAAA,GAAPR,CAAH,iPCQvB,EARiB,SAAC,GAAsB,IAApBS,EAAmB,EAAnBA,GAAIC,EAAe,EAAfA,SACtB,OACE,UAACH,EAAD,CAAYE,GAAIA,EAAhB,WACE,SAAC,MAAD,CAAaE,KAAK,OACjBD,IAGN,ECRYE,EAAWZ,EAAAA,EAAAA,IAAH,sBAERa,EAAoBb,EAAAA,EAAAA,IAAH,wD,UCwF9B,EAnFqB,WAAO,IAAD,IACjBK,GAAOS,EAAAA,EAAAA,MAAPT,GACR,GAAwBU,EAAAA,EAAAA,UAAS,CAAC,GAAlC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,WAAS,GAAnC,eAAOK,EAAP,KAAcC,EAAd,KAGMC,EAAQ,qBADGC,EAAAA,EAAAA,MACSC,aAAZ,aAAG,EAAgBC,YAAnB,QAA2B,UASzC,OAPAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBtB,GACbuB,MAAK,SAAAZ,GAAI,OAAIC,EAAQD,EAAZ,IACTa,OAAM,kBAAMR,GAAS,EAAf,IACNS,SAAQ,kBAAMX,GAAa,EAAnB,GACZ,GAAE,CAACd,KAEiB,IAAjBW,EAAKe,SACA,uBAAIf,EAAKgB,kBAGdZ,GAAOa,QAAQC,IAAId,IAGrB,iCACE,SAAC,EAAD,CAAUX,GAAIa,EAAd,SAAwB,UACvBF,GACC,uBAAG,6BAEH,gCACGF,IAAa,SAAC,IAAD,KACd,UAACL,EAAD,YACE,gBACEsB,IACEnB,EAAKoB,YAAL,0CACuCpB,EAAKoB,aACxC,iCAENC,IAAI,MAGN,UAACzB,EAAD,YACE,0BACGI,EAAKsB,MAAQtB,EAAKsB,MAAQtB,EAAKV,KAC/BiC,MAAM,IAAIC,KAAKxB,EAAKyB,cAAcC,eAC/B,GADH,WAEO,IAAIF,KAAKxB,EAAKyB,cAAcC,cAFnC,SAIH,yBAAG,cACW,IACXH,MAAMvB,EAAK2B,cACR,GACAC,KAAKC,MAA0B,GAApB7B,EAAK2B,cAAmB,QAGzC,wBAAI,cACJ,uBAAI3B,EAAK8B,YACT,wBAAI,YACJ,SAAC,EAAD,CAAQ7C,OAAQe,EAAKf,gBAIzB,uBAAG,4BACH,2BACE,yBACE,SAAC,KAAD,CAAMQ,GAAE,OAAUe,MAAO,CAAEC,KAAMH,GAAjC,SAA6C,YAI/C,yBACE,SAAC,KAAD,CAAMb,GAAE,UAAae,MAAO,CAAEC,KAAMH,GAApC,SAAgD,kBAKpD,SAAC,EAAAyB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACE,SAAC,KAAD,YAMX,C","sources":["components/Genres/Genres.jsx","components/BackLink/BackLink.styled.jsx","components/BackLink/BackLink.jsx","pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nconst Ul = styled.ul`\n  display: flex;\n  gap: 10px;\n  li {\n    list-style-type: none;\n  }\n`;\n\nconst Genres = ({ genres }) => {\n  if (genres === undefined || genres.length === 0) return <p>No data</p>;\n  return (\n    <Ul>\n      {genres.map(({ id, name }) => (\n        <li key={id}>{name}</li>\n      ))}\n    </Ul>\n  );\n};\n\nexport default Genres;\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const StyledLink = styled(Link)`\n  display: inline-flex;\n  align-items: center;\n  gap: 4px;\n  padding: 8px 0;\n  color: black;\n  text-decoration: none;\n  font-weight: 500;\n  text-transform: uppercase;\n\n  :hover {\n    color: orangered;\n  }\n`;\n","import { HiArrowLeft } from 'react-icons/hi';\nimport { StyledLink } from './BackLink.styled';\n\nconst BackLink = ({ to, children }) => {\n  return (\n    <StyledLink to={to}>\n      <HiArrowLeft size=\"24\" />\n      {children}\n    </StyledLink>\n  );\n};\nexport default BackLink;\n","import styled from '@emotion/styled';\n\nexport const FilmInfo = styled.div``;\n\nexport const FilmInfoContainer = styled.div`\n  display: flex;\n  gap: 20px;\n`;\n","import { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport { Suspense } from 'react';\nimport { getMovieDetails } from '../helper/api';\nimport { useEffect, useState } from 'react';\nimport Genres from 'components/Genres/Genres';\nimport BackLink from 'components/BackLink/BackLink';\nimport { FilmInfo, FilmInfoContainer } from './MovieDetails.styled';\nimport Loader from 'components/Loader/Loadet';\n\nconst MovieDetails = () => {\n  const { id } = useParams();\n  const [data, setData] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  const location = useLocation();\n  const backLink = location.state?.from ?? '/movies';\n\n  useEffect(() => {\n    getMovieDetails(id)\n      .then(data => setData(data))\n      .catch(() => setError(true))\n      .finally(() => setIsLoading(false));\n  }, [id]);\n\n  if (data.success === false) {\n    return <p>{data.status_message}</p>;\n  }\n\n  if (error) console.log(error);\n\n  return (\n    <>\n      <BackLink to={backLink}> Back</BackLink>\n      {error ? (\n        <p>Something went wrong...</p>\n      ) : (\n        <>\n          {isLoading && <Loader />}\n          <FilmInfoContainer>\n            <img\n              src={\n                data.poster_path\n                  ? `https://image.tmdb.org/t/p/w300/${data.poster_path}`\n                  : 'https://dummyimage.com/300x450'\n              }\n              alt=\"\"\n            />\n\n            <FilmInfo>\n              <h1>\n                {data.title ? data.title : data.name}\n                {isNaN(new Date(data.release_date).getFullYear())\n                  ? ''\n                  : `(${new Date(data.release_date).getFullYear()})`}\n              </h1>\n              <p>\n                User Score:{' '}\n                {isNaN(data.vote_average)\n                  ? ''\n                  : Math.round(data.vote_average * 10)}\n                %\n              </p>\n              <h2>overview</h2>\n              <p>{data.overview}</p>\n              <h2>Genres</h2>\n              <Genres genres={data.genres} />\n            </FilmInfo>\n          </FilmInfoContainer>\n\n          <p>Additional information</p>\n          <ul>\n            <li>\n              <Link to={`cast`} state={{ from: backLink }}>\n                Cast\n              </Link>\n            </li>\n            <li>\n              <Link to={`reviews`} state={{ from: backLink }}>\n                Reviews\n              </Link>\n            </li>\n          </ul>\n          <Suspense fallback={<Loader />}>\n            <Outlet />\n          </Suspense>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Ul","styled","genres","undefined","length","map","id","name","StyledLink","Link","to","children","size","FilmInfo","FilmInfoContainer","useParams","useState","data","setData","isLoading","setIsLoading","error","setError","backLink","useLocation","state","from","useEffect","getMovieDetails","then","catch","finally","success","status_message","console","log","src","poster_path","alt","title","isNaN","Date","release_date","getFullYear","vote_average","Math","round","overview","Suspense","fallback"],"sourceRoot":""}